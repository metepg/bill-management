{"version":3,"sources":["Functions/groupNameExists.js","Functions/loadFromLocalStorage.js","Functions/saveToLocalStorage.js","Functions/handleFormData.js","Functions/validate.js","Components/New/New.js","Functions/currentGroup.js","Components/Load/Load.js","Components/Bills/AddBill/AddBillForm.js","Functions/saveBill.js","Components/Bills/AddBill/AddBill.js","Components/Bills/Bills.js","App.js","index.js"],"names":["groupNameExists","groupName","groups","some","group","toLowerCase","key","JSON","parse","localStorage","getItem","value","setItem","stringify","handleFormData","formData","groupData","users","Object","values","validate","newGroup","savedGroups","load","firstGroup","save","alert","push","New","appProps","changePage","Form","onSubmit","e","preventDefault","FormData","target","formDataObj","fromEntries","entries","Group","controlId","Label","Control","type","placeholder","name","defaultValue","required","Button","variant","currentGroup","find","Load","map","onClick","style","display","flexDirection","margin","AddBillForm","AddBillProps","userNames","saveValue","saveBill","totalSum","fontSize","marginBottom","Fragment","onBlur","step","ref","disabled","marginLeft","marginRight","className","defaultChecked","form","console","log","AddBill","useRef","usersPaid","forEach","input","parseFloat","toFixed","updateField","Number","current","reduce","a","b","Bills","App","useState","page","setPage","tab","setTab","goTo","active","Tabs","transition","id","activeKey","onSelect","k","Tab","eventKey","title","marginTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa003cb9.chunk.js","sourcesContent":["/**\r\n * Check if group name already exists in localStorage\r\n * @param {string} groupName\r\n * @param {Array} groups - Array of groups saved to localStorage\r\n * @returns {boolean} - Group name exist or not\r\n */\r\nfunction groupNameExists(groupName, groups) {\r\n  return groups\r\n    .some((group) => group.groupName.toLowerCase() === groupName.toLowerCase());\r\n}\r\n\r\nexport default groupNameExists;\r\n","/**\r\n * Return parsed data from localStorage\r\n * @param {string} key\r\n * @returns {Array} - Parsed array\r\n */\r\nexport default (key) => JSON.parse(localStorage.getItem(key));\r\n","/**\r\n * Save data with key/value pairs to localStorage\r\n * @param {string} key\r\n * @param {Array} value - Group/s data as array\r\n */\r\nexport default (key, value) => localStorage.setItem(key, JSON.stringify(value));\r\n","/**\r\n * @param {Object} formData - Contains group name and usernames\r\n * @returns {Object} - { groupName: 'Meters', userNames: ['John','Mike','Helen'] }\r\n */\r\n\r\nfunction handleFormData(formData) {\r\n  const groupData = formData;\r\n  const { groupName } = groupData;\r\n\r\n  // Delete groupName property so object has only usernames as values\r\n  delete groupData.groupName;\r\n\r\n  // Make array from usernames\r\n  // Return object from group name and usernames\r\n  const users = Object.values(formData);\r\n  return { groupName, users };\r\n}\r\n\r\nexport default handleFormData;\r\n","import groupNameExists from './groupNameExists';\r\nimport load from './loadFromLocalStorage';\r\nimport save from './saveToLocalStorage';\r\nimport handleFormData from './handleFormData';\r\n\r\n// TODO:\r\n// Change error handling if group name exists\r\n// Validate fields\r\n\r\n// Validate form\r\n// Save group values to localStorage\r\nfunction validate(formData) {\r\n  // Create group object from formData\r\n  const newGroup = handleFormData(formData);\r\n\r\n  // Get saved groups from localStorage\r\n  const savedGroups = load('savedGroups');\r\n\r\n  // If no groups saved yet save group as new array\r\n  // Save group as object to localStorage currentGroup\r\n  if (!savedGroups) {\r\n    const firstGroup = newGroup;\r\n    save('currentGroup', firstGroup);\r\n    save('savedGroups', [firstGroup]);\r\n    return true;\r\n  }\r\n\r\n  // No duplicate group names\r\n  if (groupNameExists(newGroup.groupName, savedGroups)) {\r\n    alert('Group name already exists!');\r\n    return false;\r\n  }\r\n\r\n  // Add new group to previously created groups array\r\n  // Save current group to localStorage\r\n  savedGroups.push(newGroup);\r\n  save('savedGroups', savedGroups);\r\n  save('currentGroup', newGroup);\r\n  return true;\r\n}\r\n\r\nexport default validate;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport validate from '../../Functions/validate';\r\nimport './style.css';\r\n\r\nfunction New(appProps) {\r\n  const { changePage } = appProps;\r\n\r\n  function formSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    // Get form values as object\r\n    const formData = new FormData(e.target);\r\n    const formDataObj = Object.fromEntries(formData.entries());\r\n\r\n    // If values are valid go to next page\r\n    if (validate(formDataObj)) changePage('page2', 'bills');\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={formSubmit}>\r\n      <Form.Group controlId=\"groupName\">\r\n        <Form.Label>Group name</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"The meters\"\r\n          name=\"groupName\"\r\n          defaultValue=\"The Meters\"\r\n        />\r\n      </Form.Group>\r\n      <Form.Group controlId=\"users\">\r\n        <Form.Label>Users</Form.Label>\r\n        <Form.Control\r\n          required\r\n          type=\"text\"\r\n          placeholder=\"User 1\"\r\n          name=\"user1\"\r\n          defaultValue=\"eka nimi\"\r\n        />\r\n        <Form.Control\r\n          required\r\n          type=\"text\"\r\n          placeholder=\"User 2\"\r\n          name=\"user2\"\r\n          defaultValue=\"toka nimi\"\r\n        />\r\n        <Form.Control\r\n          required\r\n          type=\"text\"\r\n          placeholder=\"User 3\"\r\n          name=\"user3\"\r\n          defaultValue=\"kolmas nimi\"\r\n        />\r\n      </Form.Group>\r\n      <Button variant=\"primary\" type=\"submit\">\r\n        Submit\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default New;\r\n","import load from './loadFromLocalStorage';\r\n/**\r\n * From localStorage:\r\n * Get current groups data matching the group name\r\n * @param {string} name - Group name to match\r\n * @returns {Object} - Eg. { groupName: 'Meters', userNames: ['John','Mike','Helen'] }\r\n */\r\nfunction currentGroup(name) {\r\n  const groups = load('savedGroups');\r\n  return groups.find((group) => group.groupName === name);\r\n}\r\n\r\nexport default currentGroup;\r\n","import React from 'react';\r\nimport load from '../../Functions/loadFromLocalStorage';\r\nimport currentGroup from '../../Functions/currentGroup';\r\nimport save from '../../Functions/saveToLocalStorage';\r\n\r\nfunction Load(appProps) {\r\n  const { changePage } = appProps;\r\n  let groups = load('savedGroups');\r\n\r\n  // Save selected group as currentGroup\r\n  // Go to next page\r\n  function loadGroup(groupName) {\r\n    save('currentGroup', currentGroup(groupName));\r\n    changePage('page2', 'bills');\r\n  }\r\n\r\n  // Render group names as buttons\r\n  if (!groups) {\r\n    groups = <h1>No groups found!</h1>;\r\n  } else {\r\n    groups = groups.map((group) => (\r\n      <button\r\n        onClick={() => loadGroup(group.groupName)}\r\n        key={group.groupName}\r\n        type=\"button\"\r\n      >\r\n        {group.groupName}\r\n      </button>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        margin: '5rem 3rem',\r\n      }}\r\n    >\r\n      {groups}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Load;\r\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nfunction AddBillForm(AddBillProps) {\n  const {\n    userNames,\n    saveValue,\n    saveBill,\n    totalSum,\n  } = AddBillProps;\n\n  // Create input fields according to usernames\n  function getInputFields(users) {\n    return users.map((name) => (\n      <React.Fragment key={name}>\n        <Form.Label>{name}</Form.Label>\n        <Form.Control\n          onBlur={(e) => saveValue(e.target)}\n          required\n          name={name}\n          type=\"number\"\n          step=\"0.01\"\n          placeholder=\"0.00\"\n        />\n        <br />\n      </React.Fragment>\n    ));\n  }\n\n  return (\n    <Form onSubmit={saveBill}>\n      <Form.Label\n        style={{ fontSize: '1.5rem', marginBottom: '1rem' }}\n      >\n        Description\n        <Form.Control\n          type=\"text\"\n          name=\"description\"\n          required\n          placeholder=\"Description/tag\"\n        />\n      </Form.Label>\n      <Form.Group controlId=\"usersPaid\">\n        {getInputFields(userNames)}\n      </Form.Group>\n      <Form.Group controlId=\"totalSum\">\n        <Form.Label>Total sum:</Form.Label>\n        <Form.Control\n          type=\"number\"\n          step=\"0.01\"\n          placeholder=\"0.00\"\n          ref={totalSum}\n          disabled\n        />\n      </Form.Group>\n      <Form.Label style={{ marginBottom: '1rem' }}>\n        Even shares?\n        <input\n          name=\"evenShares\"\n          style={{\n            marginLeft: '0.5rem',\n            marginRight: '0.4rem',\n          }}\n          className=\"toggle\"\n          type=\"checkbox\"\n          defaultChecked\n        />\n      </Form.Label>\n      <br />\n\n      <Button variant=\"primary\" type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n\nexport default AddBillForm;\n","function saveBill(form) {\n  form.preventDefault();\n\n  // Get form values as object\n  const formData = new FormData(form.target);\n  const values = Object.fromEntries(formData.entries());\n  console.log(values);\n}\n\nexport default saveBill;\n","import React, { useRef } from 'react';\r\nimport Form from './AddBillForm';\r\nimport saveBill from '../../../Functions/saveBill';\r\nimport load from '../../../Functions/loadFromLocalStorage';\r\nimport './style.css';\r\n\r\nfunction AddBill() {\r\n  const { users } = load('currentGroup');\r\n  const totalSum = useRef(0);\r\n\r\n  // Set usernames array values as keys in object\r\n  let usersPaid = {};\r\n  users.forEach((key) => {\r\n    usersPaid[key] = 0;\r\n  });\r\n\r\n  // Update field value to have 2 decimals\r\n  function updateField(e) {\r\n    e.value = parseFloat(e.value).toFixed(2);\r\n    return e.value;\r\n  }\r\n\r\n  // Handle user inputs\r\n  function saveValue(e) {\r\n    const input = updateField(e);\r\n    // Save user input to correct username\r\n    e.value = input;\r\n    usersPaid = {\r\n      ...usersPaid,\r\n      [e.name]: Number(input),\r\n    };\r\n\r\n    // Calulate total sum value from user inputs\r\n    totalSum.current.value = Object.values(usersPaid)\r\n      .reduce((a, b) => a + b)\r\n      .toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <section className=\"add-bill-controller\">\r\n      <Form\r\n        saveBill={saveBill}\r\n        saveValue={saveValue}\r\n        userNames={users}\r\n        usersPaid={usersPaid}\r\n        totalSum={totalSum}\r\n      />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default AddBill;\r\n","import React from 'react';\r\nimport AddBill from './AddBill/AddBill';\r\n\r\nfunction Bills() {\r\n  return (\r\n    <>\r\n      <AddBill />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Bills;\r\n","import React, { useState } from 'react';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport New from './Components/New/New';\r\nimport Load from './Components/Load/Load';\r\nimport Bills from './Components/Bills/Bills';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [page, setPage] = useState('main');\r\n  const [tab, setTab] = useState('new');\r\n\r\n  function changePage(goTo, active) {\r\n    setPage(goTo);\r\n    setTab(active);\r\n  }\r\n\r\n  return (\r\n    <main className=\"app-container\">\r\n      {page === 'main' ? (\r\n        <Tabs\r\n          transition={false}\r\n          id=\"controlled\"\r\n          activeKey={tab}\r\n          onSelect={(k) => setTab(k)}\r\n        >\r\n          <Tab eventKey=\"new\" title=\"New\">\r\n            <New changePage={changePage} />\r\n          </Tab>\r\n          <Tab eventKey=\"load\" title=\"Load\">\r\n            <Load changePage={changePage} />\r\n          </Tab>\r\n        </Tabs>\r\n      ) : (\r\n        <Tabs\r\n          transition={false}\r\n          id=\"controlled\"\r\n          activeKey={tab}\r\n          onSelect={(k) => setTab(k)}\r\n        >\r\n          <Tab eventKey=\"bills\" title=\"Bills\">\r\n            <Bills />\r\n          </Tab>\r\n          <Tab eventKey=\"manage\" title=\"Manage\" />\r\n          <Tab eventKey=\"exit\" title=\"Exit\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => changePage('main', 'new')}\r\n              style={{ marginTop: '5rem', fontSize: '2rem' }}\r\n            >\r\n              Exit\r\n            </button>\r\n          </Tab>\r\n        </Tabs>\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}